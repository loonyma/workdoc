#DPDK协议栈调研


##一.开源协议栈调研

**目前基于DPDK的开源协议栈由以下几类,其中mtcp,drv-netif-dpdk,dpdk-ans较为成熟．以下是所有协议栈的大概介绍．**


| num | name           | 介绍                                                                                                                                                                                                                                                                                                           | 基于的协议栈            | 协议栈是否开源             | 优点                                                                                                                        | 缺点                                                                                     |
|:----|:---------------|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:------------------------|:---------------------------|:----------------------------------------------------------------------------------------------------------------------------|:-----------------------------------------------------------------------------------------|
| １  | mtcp           | 基于ＤPDK自己开发的TCP/IP协议栈,mtcp的实现基于RF793规范，提供了大多数基础TCP功能，以及一些常见的socket套解字配置．同时，mtcp对DPDK进行了一小部分扩展：提供了简单的控制平面，被igb_uio驱动绑定的硬件设备，自动为其在linux上注册为网络设备，被用作配置接口（ifconfig）[官网](https://github.com/eunyoung14/mtcp) | 自己实现，基于RF793规范 | 开源                       | 其层次结构清晰，便于适配使用.同时国内一些机构也在研究和使用                                                                 | 部分协议目前没有实现;mtcp单核性能比传统协议栈差很多;mtcp协议栈在异常状态处理上还有所不足 |
| ２  | dpdk-ans       | 基于DPDK TCP/IP协议栈，提供了控制平面，用户可以在linux平面进行网络的配置[官网](https://github.com/opendp/dpdk-ans),具体见下面分析                                                                                                                                                                              | FreeBSD TCP/IP协议栈    | 协议栈不开源，只提供库文件 | 基于其上已经有nginx，redis等项目的开发和实现；项目是一个正在运转的项目，项目提交频繁．同时该项目是国内成员开发，后期可以进行商业沟通 | 目前协议栈不开源，风险点不好控                                                           |
| ３  | drv-netif-dpdk | 是一个针对于rump kernel的tcp/ip协议栈，该协议栈可以用于dpdk之上. [官网](https://github.com/rumpkernel/drv-netif-dpdk) ，具体见下面分析|NetBSD TCP/IP stack|协议开源| 从官网介绍可以看出是rump kernel下一代核心技术比较前沿| 目前资料较少，对其风险点不可控，同时其没有epoll和kqueue会对并发性能有影响|
|4|libos-nuse| 基于libos的用于空间的协议,libos是一个linux kernel的库操作系统| Linux kernel协议栈|开源|N/A|N/A|
| 5   | ipaugenblick   | 将Linux TCP/IP协议栈移植到DPDK上[官网](https://github.com/vadimsu/ipaugenblick)                                                                                                                                                                                                                                | TCP/IP协议栈            | 开源                       | N/A                                                                                                                         | N/A                                                                                      |
| 6   | LWIPDPDK       | 将Lwip协议栈移植到DPDK之上[官网]（https://github.com/weixu8/LWIPDPDK/tree/master/lwip）                                                                                                                                                                                                                        | Lwip协议栈              | 开源                       | LWIP协议栈是一个轻型的协议栈                                                                                                | N/A                                                                                      |
| 7   | tcpipstack     | 一个简易的基于ＤPDK的用户空间协议栈[官网](https://github.com/rajneshrat/dpdk-tcpipstack)                                                                                                                                                                                                                       | N/A                     | 开源                       | 后期可以进行参考                                                                                                            | 介绍过少，只实现了基本协议                                                               |
| 8   | ustack         | 基于dpdk的用户空间的TCP/IP协议栈[官网](https://https://github.com/jiakai1000/ustack)                                                                                                                                                                                                                           | N/A                     | 开源                       | 简洁的协议栈,可用为后期参考                                                                                                 | 只实现了基本的协议栈功能                                                                 |

###一.MTCP

**1.introduce**

mTCP is a highly scalable user-level TCP stack for multicore systems. 
mTCP source code is distributed under the Modified BSD License. For 
more detail, please refer to the LICENSE. The license term of io_engine 
driver and ported applications may differ from the mTCP’s.

We have modified the dpdk-16.04 package to export net_device stat data 
to the OS. To achieve this, the dpdk-16.04/lib/librte_eal/linuxapp/igb_uio/
directory was updated. We recommend using our package for DPDK installation. 

**2.Code struct** 

```
mtcp - mtcp source code directory
mtcp/src - source code
mtcp/src/include - mTCP’s internal header files
mtcp/lib - library file
mtcp/include - header files that applications will use

io_engine - event-driven packet I/O engine (io_engine)
io_engine/driver - driver source code
io_engine/lib - io_engine library
io_engine/include - io_engine header files
io_engine/samples - sample io_engine applications (not mTCP’s)

dpdk-16.04 - Intel's Data Plane Development Kit* (modified)
dpdk-16.04/...

dpdk/ - Holds soft links to the compiled dpdk-16.04 include/ and lib/ paths
dpdk/include - the header files
dpdk/lib - the libraries that need to be linked

apps - mTCP applications
apps/example - example applications (see README)
apps/lighttpd-1.4.32 - mTCP-ported lighttpd (see INSTALL)
apps/apache_benchmark - mTCP-ported apache benchmark (ab) (see README-mtcp) [DEPRECATED]
		       (May be revived based on users' feedback).

util - useful source code for applications

config - sample mTCP configuration files (may not be necessary)

```

###二.DPDK-ANS

**1.框架**

```
         |-------|       |-------|       |-------|
         |  APP  |       |  APP  |       |  APP  |
         |-------|       |-------|       |-------|
             |               |               |
--------------------------------------------------
netdpsock    |               |               |			
             fd              fd              fd
             |               |               |
--------------------------------------------------
ANS          |               |               |
         |-------|       |-------|       |-------|
         | TCP   |       |  TCP  |       | TCP   |
         |       |       |       |       |       |
         |---------------------------------------|       
         |               IP/ARP/ICMP             |
         |---------------------------------------|       
         |       |       |       |       |       |
         |LCORE0 |       |LCORE1 |       |LCORE2 |
         |-------|       |-------|       |-------|
             |               |               |
             ---------------RSS---------------
                             |
         |---------------------------------------|
         |                  NIC                  |
         |---------------------------------------|

```

 - NIC distribute packets to different lcore based on RSS, so same TCP flow are handled in the same lcore.
 - Each lcore has own TCP stack. so no share data between lcores, free lock.
 - IP/ARP/ICMP are shared between lcores.
 - APP process runs as a tcp server.
  - If App process only creates one listen socket, the listen socket only listens on one lcore and accept tcp connections from the lcore, so the APP process number shall large than the lcore number. The listen sockets of APP processes are created on each lcore averagely. For example: ans(with -c 0x3) run on two lcore, shall run two nginx(only run master ), one nginx listens on lcore0, another nginx listens on lcore1.
  - If App process creates many listen sockets, the listen sockets number shall be equal to the lcore numbers. these listen sockets can be created on each lcore averagely too. For example: ans(with -c 0x3) run on two lcore, redis server(one process) shall create two listen socket, one listen socket is created on lcore0, another listen socket is created on lcore1.
 - APP process runs as a tcp client, app process can communicate with each lcore. The tcp connection can be located in specified lcore automaticly.
 - APP process can bind the same port if enable reuseport, APP process could accept tcp connection by round robin.
 - If NIC don't support multi queue or RSS, shall enhance ans_main.c, reserve one lcore to receive and send packets from NIC, and distribute packets to lcores of ANS tcp stack by software RSS.

**2.支持以下功能：**

 - ANS initialize
 - Ether, zero copy between NIC and ANS TCP/IP stack.
 - ARP, ARP timeout
 - IP layer, IP fragmentation and reassemble
 - Routing
 - ICMP
 - Commands for adding, deleting, showing IP address
 - Commands for adding, deleting, showing static route
 - Commands for showing ARP table
 - UDP protocol
 - Socket layer, share memory.
 - Socket API, socket/close/send/recv/epoll.
 - TCP protocol
    - Free lock, hash table.
    - Support SO_REUSEPORT, multi application can listen the same port.
    - Support multicore tcp stack, per tcp stack per lcore.
    - Support TSO.

**3.下一步计划**

- Enhance socket API
- Performance testing.

**4.项目组成**

- librte_ans: TCP/IP stack static library. ANS use dpdk mbuf, ring, memzone, mempool, timer, spinlock. so zero copy mbuf between dpdk and ANS.

- librte_anssock: ANS socket lib for application, zero copy between ANS and application.

- cli: Command for configure ANS tcp/ip stack.

- test: Example application with ANS for testing ANS tcp/ip stack



**5.Performance Testing**

- TCP server performance testing

 ENV: CPU- intel xeon 2.3G, NIC- 10G, Test tool:ab

 Procedure: ab establish tcp connection to ANS tcp server, ab download one data, ANS tcp server close socket.

 Command: ab -n 1000000 -c 500  2.2.2.2:8089/

 Notes: shall increase test linux PC local port range (net.ipv4.ip_local_port_range = 1024 65000).
```
    |--------------------------------------|
    |      TCP Server accept performance   |
    |--------------------------------------|
    | Linux with epoll |   ANS with epoll  |
    |    (Multi core)  |    (one core)     |
    |--------------------------------------|
    | 53k connection/s | 43k connection/s  |
    |--------------------------------------|
```
- TCP socket data transmission performance

One socket receive 190Mbyte tcp payload, one socket send 130Mbyte tcp payload
```
Communication(synchronization)  0 runtime:	 0.734931 s
Communication(synchronization)  1 runtime:	 0.469566 s
Communication(synchronization)  2 runtime:	 0.449729 s04
  - Development enviroment is based on x86_64-native-linuxapp-gcc
  - TCP/IP stack is based on FreeBSD 10.0-RELEASE
  - linux version：
3.16.0-30-generic
  - gcc version：
gcc version 4.8.4 (Ubuntu 4.8.4-2ubuntu1~14.04)

Support feature:
 - ANS initialize
 - Ether, zero copy between NIC and ANS TCP/IP stack.
 - ARP, ARP timeout
 - IP layer, IP fragmentation and reassemble
 - Routing
 - ICMP
 - Commands for adding, deleting, showing IP address
 - Commands for adding, deleting, showing static route
Communication(synchronization)  5 runtime:	 0.647259 s
Communication(synchronization)  6 runtime:	 0.457027 s
Communication(synchronizat

- L3 forwarding performance testing

  ENV: CPU- intel xeon 2.3G, NIC- 10G, one lcore rx packets-->l3 forwarding --> tx packets,  Test tool:pktgen-DPDK
  

    |--------------------------------------|
    |      L3 forwarding performance       |
    |             (one lcore)              |
    |--------------------------------------|
    | Packet size(byte)| Throughput(Mpps)  |
    |--------------------------------------|
    |     64           |      3.682        |
    |--------------------------------------|
    |     128          |      3.682        |
    |--------------------------------------|
    |     256          |      3.683        |
    |--------------------------------------|
    |     512          |      2.35         |
    |--------------------------------------|
    |     1024         |      1.197        |
    |--------------------------------------|
    |     1500         |      0.822        |
    |--------------------------------------|

```


####三.drv netif dpdk

drv-netif-dpdk is a DPDK network interface for rump kernels. The combined result is a TCP/IP stack doing packet I/O via DPDK.

in diagram form:


```

    ------------------------------
    |    application process     |
    ||--------------------------||
    || rump kernel (TCP/IP etc.)||
    ||--------------------------||
    || drv-netif-dpdk (dpdkif)  ||
    ||--------------------------||
    || DPDK                     ||
    |----------------------------|
    -----------------------------|


```

####四.libos-nuse

Network Stack in Userspace (NUSE) NUSE allows us to use Linux network stack as a library which any applications can directory use by linking the library. Each application has its own network stack so, it provides an instant virtualized environment apart from a host operating system.



##基于DPDK的其他项目

1.dpdk_dpi:DPI with DPDK-acceleration.

[参考](https://github.com/forward32/dpdk_dpi)

Current limitations:

1) Only Ethernet/IP(4/6)/TCP(UDP) packets supported. Packets with VLAN supported too, but MPLS packets not supported for input.

2) Can't change rules in real-time. Static configuration with next available commands: drop, push-vlan, push-mpls, output.

3) One RX and TX queue.

2.uaflow:基于dpdk，针对User-Agent进行负载均衡与分流.

[参考](https://github.com/xuyuuu/uaflow)

Project Introduction

This project is using for Traffic Load Balancing.

1: program is based in dpdk(version 2.1.0).
2: flow by User-Agent.
3: The program has ablitity in DDos Scanning.

Build and use

Please looking at document about dpdk(www.dpdk.org)

You should run 'dpdk_nic_bind.py' for binding NIC.

You should mount nodev for using hugepage.
After above operation, you could run 'make' and run 'uaflow'.
